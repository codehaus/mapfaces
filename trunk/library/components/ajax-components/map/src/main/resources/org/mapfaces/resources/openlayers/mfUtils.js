/**
 * This function add an OpenLayers.layer.Vector  to an  OpenLayers.Map.
 * Features of this layer are generated by an feature collection in OpenLayers.GeoJSON format
 *
 * @param  json    String       The GeoJson feature collection to parse
 * @param  data    String       object always to null (we need it because of Mootools ajax request and IE)
 * @param  mapId   String       js object name of an OpenLayers.Map
 * @param  layerId String       js object name of an OpenLayers.Layer.Vector object
 *
 *
 */
window.loadGeoJSON = function (json, data, mapId, layerId) {
    
    mapId =
        (mapId == null && (this.options && this.options.mapId))
            ? this.options.mapId
                : mapId;
    layerId =
        (layerId == null && (this.options && this.options.layerId))
            ? this.options.layerId
                : layerId;
    var map = window.maps[mapId];
    
    if (map != null) {
        var layer =  (window[layerId])? layer = window[layerId] : null;

        if (json == null || json == "") {

            if (layer != null && layer.div != null) {
                map.removeLayer(layer);
                layer = null;
            }

        } else {
            eval(json);
            var geojson_format = new OpenLayers.Format.GeoJSON();
            
            if (layer != null && layer.div != null) {
                map.removeLayer(layer);
                layer = null;
            }

            var myStyles = new OpenLayers.StyleMap({
                    "default": new OpenLayers.Style({
                        fillColor: "#ff0000",
                        strokeColor: "#ff9933",
                        strokeWidth: 5
                    })
                });
            layer = new OpenLayers.Layer.Vector(layerId, {styleMap: myStyles});
            map.addLayer(layer);
            layer.addFeatures(geojson_format.read(thesaurusCollection));
            map.zoomToExtent(layer.getDataExtent());
            window[layerId] = layer;
        }
    }
}

window.loadMap = function(id) {
    if (id.indexOf(":") != -1) {
        id = id.replace(":","");
    }
    eval("if(window.loadMap"+id+")window.loadMap"+id+"();"); 
}

window.loadMapAndZoom = function(id) {
    window.loadMap(id);
    window.addControlsToMap(id);
    window.maps[id].zoomToExtent(window.maps[id].currentExtent);
}

window.addControlsToMap = function(id) {
    var controls = eval("if(window.controlToAdd"+id+")window.controlToAdd"+id);    
    if (controls) {
        for (var i = 0; i < controls.length; i++) {
            controls[i]();
        }
    }
}

window.reloadAllMaps = function() {
    if (window.maps) {
        for (var i in window.maps) {
            var map = window.maps[i];
            if (map && map.div && map.div.style.display != 'none') {
                if (map.currentExtent)
                  map.zoomToExtent(map.currentExtent);
                else
                  map.zoomToMaxExtent();
            } else {
                 window.loadMapAndZoom(i);
            }
        }
    }
}

////Add onload function to window to zoom the map to the maxExtent
OpenLayers.Event.observe(window, 'load', window.reloadAllMaps);
